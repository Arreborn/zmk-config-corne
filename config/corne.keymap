#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

&sk { release-after-ms = <1500>; };

&mt {
    flavor = "balanced";
    tapping-term-ms = <175>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <30>;
};

/ {
    behaviors {
        ctrl_tab: ctrl_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_TAB";
            bindings = <&space_mod>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        ctrl_del: ctrl_del {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        adv_lt: adv_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "ADV_LT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <100>;
            require-prior-idle-ms = <75>;
        };

        mod_com: mod_com {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_COM";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_per: mod_per {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_PER";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sk_mod: sk_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MOD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "tap-preferred";
        };

        s_shift_td: s_shift_td {
            compatible = "zmk,behavior-tap-dance";
            label = "S_SHIFT_TD";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <180>;
        };

        layer_tap: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        para_l: para_l {
            compatible = "zmk,behavior-mod-morph";
            label = "PARA_L";
            bindings = <&shift_para>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        para_r: para_r {
            compatible = "zmk,behavior-mod-morph";
            label = "PARA_R";
            bindings = <&shift_para_r>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        para_tap: para_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA_TAP";
            #binding-cells = <0>;
            bindings = <&para_l>, <&para_r>;

            tapping-term-ms = <150>;
        };

        shift_para: shift_para {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_PARA";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        shift_para_r: shift_para_r {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_PARA_R";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        space_mod: space_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MOD";
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        excl_morph: excl_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL_MORPH";
            bindings = <&tild_excl>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        squot_h1: squot_h1 {
            compatible = "zmk,behavior-mod-morph";
            label = "SQUOT_H1";
            bindings = <&kp SQT>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        super_quote: super_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_QUOTE";
            bindings = <&squot_h1>, <&kp RA(E)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        inc_dec: inc_dec {
            compatible = "zmk,behavior-mod-morph";
            label = "INC_DEC";
            bindings = <&kp LC(A)>, <&kp LC(X)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        tild_excl: tild_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "TILD_EXCL";
            bindings = <&kp SLASH>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        bs_pipe: bs_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_PIPE";
            bindings = <&kp PIPE>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        uml {
            bindings = <&kp RA(U)>;
            key-positions = <8 20>;
        };

        swehelp {
            bindings = <&kp RA(A)>;
            key-positions = <20 21>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB                            &kp B           &kp L           &kp P              &kp M             &kp X               &para_tap        &kp F              &kp O                &kp U           &kp J            &kp LA(U)
&s_shift_td                        &mt LEFT_GUI D  &mt LEFT_ALT R  &mt LCTRL T        &mt LEFT_SHIFT S  &kp V               &kp Y            &mt RIGHT_SHIFT N  &mt RCTRL A          &mt LEFT_ALT E  &mt RIGHT_GUI I  &excl_morph
&sk_mod LEFT_CONTROL LEFT_CONTROL  &kp G           &kp W           &kp K              &kp C             &kp Q               &kp Z            &kp H              &super_quote         &mod_com        &mod_per         &mt RIGHT_ALT MINUS
                                                                   &mt LEFT_GUI LEFT  &ctrl_del         &adv_lt 2 ESCAPE    &adv_lt 1 ENTER  &ctrl_tab          &mt RIGHT_GUI RIGHT
            >;
        };

        NUM {
            display-name = "Num";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp BACKSLASH   &kp NUMBER_1            &kp NUMBER_2            &kp NUMBER_3    &kp NUMBER_4          &kp N5       &kp NUMBER_6   &kp N7                    &kp N8        &kp N9                  &kp N0            &kp MINUS
&trans          &mt LEFT_GUI AMPERSAND  &mt LEFT_ALT LESS_THAN  &mt LCTRL PLUS  &mt LEFT_SHIFT EQUAL  &kp MINUS    &para_tap      &mt RIGHT_SHIFT NUMBER_4  &mt RCTRL N5  &mt RIGHT_ALT NUMBER_6  &mt RIGHT_GUI N0  &trans
&layer_tap 4 4  &bs_pipe                &kp GREATER_THAN        &kp ASTERISK    &inc_dec              &kp SLASH    &kp LG(LS(E))  &kp NUMBER_1              &kp NUMBER_2  &kp NUMBER_3            &trans            &trans
                                                                &trans          &trans                &trans       &trans         &trans                    &trans
            >;
        };

        NAV {
            display-name = "Nav";
            bindings = <
&trans  &trans                     &trans                     &trans               &trans                         &trans                  &kp LS(LG(S))          &kp LG(C)  &kp LG(V)       &kp LG(X)     &kp LG(Z)  &kp LG(LS(S))
&mo 5   &sk_mod LEFT_GUI LEFT_GUI  &sk_mod LEFT_ALT LEFT_ALT  &sk_mod LCTRL LCTRL  &sk_mod LEFT_SHIFT LEFT_SHIFT  &browsertab             &kp LS(LG(R))          &kp LEFT   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp F2
&trans  &trans                     &trans                     &trans               &trans                         &kp LG(LEFT_BRACKET)    &kp LG(RIGHT_BRACKET)  &kp HOME   &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &trans
                                                              &trans               &trans                         &trans                  &trans                 &trans     &trans
            >;
        };

        Configure {
            bindings = <
&trans          &kp C_BRI_UP       &kp LC(LA(LG(N8)))    &kp LC(LS(LG(P)))     &kp LG(LC(LS(M)))         &kp C_VOLUME_UP      &kp C_NEXT  &kp LC(LS(LEFT))  &kp LC(DOWN)       &kp LC(UP_ARROW)       &kp LS(LC(RIGHT))  &kp LG(SPACE)
&kp ESCAPE      &kp LC(LS(LG(D)))  &kp LG(LS(LC(R)))     &kp LG(LS(LC(T)))     &kp LS(LG(LC(S)))         &kp K_MUTE           &kp C_PP    &kp LS(LG(LEFT))  &kp LG(LS(SPACE))  &kp LC(LA(LG(SPACE)))  &kp LS(LG(RIGHT))  &kp LC(LS(LG(SLASH)))
&studio_unlock  &kp C_BRI_DN       &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LC(LS(NUMBER_4)))  &kp C_VOLUME_DOWN    &kp C_PREV  &kp F16           &kp F17            &kp F18                &kp LG(M)          &bootloader
                                                         &none                 &none                     &trans               &trans      &none             &none
            >;

            label = "Conf";
        };

        Fun {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "Fun";
        };

        MiniNum {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "mininum";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        conf {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
