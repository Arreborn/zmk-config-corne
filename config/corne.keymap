#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        brace: brace {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        bracket: bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        shift_tab: shift_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_TAB";
            bindings = <&kp SPACE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_del: shift_del {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        adv_lt: adv_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "ADV_LT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <100>;
            require-prior-idle-ms = <75>;
        };

        mod_com: mod_com {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_COM";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_per: mod_per {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_PER";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_hold_tap: mod_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;

            quick-tap-ms = <75>;
            require-prior-idle-ms = <60>;
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&mod_hold_tap LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        adv_repeat: adv_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "ADV_REPEAT";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <60>;
            require-prior-idle-ms = <60>;
            flavor = "tap-preferred";
        };

        shift_para: shift_para {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_PARA";
            bindings = <&para>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        shift_bracket: shift_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_BRACKET";
            bindings = <&bracket>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        shift_angle: shift_angle {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_ANGLE";
            bindings = <&angle_brckt>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        swe_chars: swe_chars {
            compatible = "zmk,behavior-tap-dance";
            label = "SWE_CHARS";
            #binding-cells = <0>;
            tapping-term-ms = <140>;
            bindings = <&kp RA(A)>, <&kp RA(U)>;
        };

        adv_backforth: adv_backforth {
            compatible = "zmk,behavior-mod-morph";
            label = "ADV_BACKFORTH";
            bindings = <&kp LG(LEFT_BRACKET)>, <&kp LG(RIGHT_BRACKET)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sk_mod: sk_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MOD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <90>;
            flavor = "tap-preferred";
        };

        s_shift_td: s_shift_td {
            compatible = "zmk,behavior-tap-dance";
            label = "S_SHIFT_TD";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <180>;
        };

        s_shift: s_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "S_SHIFT";
            bindings = <&kp>, <&s_shift_td>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        layer_tog: layer_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };

        angle_brckt: angle_brckt {
            compatible = "zmk,behavior-tap-dance";
            label = "ANGLE_BRCKT";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
        };

        shift_brace: shift_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_BRACE";
            bindings = <&brace>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <260>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <16 15 14 13>;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <260>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <19 20 21 22 41>;
        };

        quick_tap: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <70>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        per_auto: per_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "PER_AUTO";
        };

        com_auto: com_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "COM_AUTO";
        };

        exl_auto: exl_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp SPACE &sk LEFT_SHIFT>;
            label = "EXL_AUTO";
        };

        ques_auto: ques_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp SPACE &sk LEFT_SHIFT>;
            label = "QUES_AUTO";
        };

        sci_ho: sci_ho {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp O>;
            label = "SCI_HO";
        };

        sci_sp: sci_sp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp M>;
            label = "SCI_SP";
        };

        sci_sc: sci_sc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp C>;
            label = "SCI_SC";
        };

        inner_word: inner_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp W>;
            label = "INNER_WORD";
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_wait_time 1000>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "ALT_TAB";
        };
    };

    combos {
        compatible = "zmk,combos";

        sym_8 {
            bindings = <&kp RA(U)>;
            key-positions = <8 20>;
        };

        alt-a {
            bindings = <&kp RA(A)>;
            key-positions = <20 32>;
        };

        sci-ho {
            bindings = <&sci_ho>;
            key-positions = <19 31>;
        };

        sci-sp {
            bindings = <&sci_sp>;
            key-positions = <16 4>;
        };

        sci-sc {
            bindings = <&sci_sc>;
            key-positions = <16 28>;
        };

        iw {
            bindings = <&inner_word>;
            key-positions = <23 22>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB      &kp B            &kp L            &kp P                        &kp M              &kp X               &kp LS(LG(R))    &kp F               &kp O                 &kp U             &kp J             &kp LG(SPACE)
&s_shift_td  &hml LEFT_GUI D  &hml LEFT_ALT R  &hml LEFT_CONTROL T          &hml LEFT_SHIFT S  &kp V               &kp Y            &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL A  &hmr RIGHT_ALT E  &hmr RIGHT_GUI I  &quick_tap RIGHT_SHIFT SLASH
&mo 2        &kp G            &kp W            &kp K                        &kp C              &kp Q               &kp Z            &kp H               &kp SQT               &mod_com          &mod_per          &sk_mod RIGHT_ALT RIGHT_ALT
                                               &adv_repeat RIGHT_CONTROL 0  &shift_del         &adv_lt 3 ESCAPE    &adv_lt 1 ENTER  &shift_tab          &hmr RIGHT_GUI MINUS
            >;
        };

        NUM {
            display-name = "Num";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &none      &kp AMPERSAND    &kp GREATER_THAN  &kp PERCENT   &kp NON_US_BACKSLASH    &kp NUMBER_6    &kp N7        &kp N8        &kp N9        &kp N0       &trans
&trans  &kp LC(A)  &kp EXCLAMATION  &kp EQUAL         &kp PLUS      &kp MINUS               &kp LEFT        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp RIGHT    &kp LEFT_GUI
&mo 5   &kp LC(X)  &kp PIPE         &kp LESS_THAN     &kp ASTERISK  &kp SLASH               &shift_bracket  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &shift_para  &trans
                                    &mo 6             &trans        &adv_lt 4 ESCAPE        &trans          &trans        &trans
            >;
        };

        SYM {
            display-name = "Sym";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT       &kp HASH      &kp DLLR         &kp PRCNT     &kp CARET      &kp AMPS   &kp ASTRK    &kp LEFT_PARENTHESIS  &kp RPAR        &kp QUESTION
&trans  &none     &s_shift_td  &kp QUESTION  &kp EXCLAMATION  &kp GRAVE     &shift_angle   &kp EQUAL  &shift_para  &shift_brace          &shift_bracket  &trans
&trans  &none     &kp TILDE    &ques_auto    &exl_auto        &kp PIPE      &kp LS(LG(E))  &kp PLUS   &trans       &com_auto             &per_auto       &kp NON_US_BACKSLASH
                               &trans        &trans           &kp ESCAPE    &kp ENTER      &trans     &trans
            >;
        };

        NAV {
            display-name = "Nav";
            bindings = <
&alt_tab                              &kp LG(Q)              &kp LG(W)                  &kp LG(E)                  &kp LG(R)                          &kp LG(LS(T))           &trans                 &kp HOME      &kp PG_DN           &kp PG_UP         &kp END        &kp LG(L)
&browsertab                           &s_shift LEFT_SHIFT 0  &sk_mod LEFT_GUI LEFT_GUI  &sk_mod LEFT_ALT LEFT_ALT  &sk_mod LEFT_CONTROL LEFT_CONTROL  &kp LG(F)               &kp LS(LG(R))          &kp LEFT      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT      &kp RIGHT_SHIFT
&kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT  &kp LG(Z)              &kp LG(X)                  &kp LG(C)                  &kp LG(V)                          &kp LG(LEFT_BRACKET)    &kp LG(RIGHT_BRACKET)  &kp LC(LEFT)  &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT)  &trans
                                                                                        &trans                     &trans                             &trans                  &adv_lt 4 ENTER        &trans        &trans
            >;
        };

        Configure {
            bindings = <
&kp TAB         &kp C_BRI_UP       &kp LC(LA(LG(N8)))    &kp LC(LS(LG(P)))     &kp LG(LC(LS(M)))         &kp C_VOLUME_UP      &kp C_NEXT  &kp LC(LS(LEFT))  &kp LC(DOWN)       &kp LC(UP_ARROW)       &kp LS(LC(RIGHT))  &kp LG(SPACE)
&kp ESCAPE      &kp LC(LS(LG(D)))  &kp LG(LS(LC(R)))     &kp LG(LS(LC(T)))     &kp LS(LG(LC(S)))         &kp K_MUTE           &kp C_PP    &kp LS(LG(LEFT))  &kp LG(LS(SPACE))  &kp LC(LA(LG(SPACE)))  &kp LS(LG(RIGHT))  &kp LC(LS(LG(SLASH)))
&studio_unlock  &kp C_BRI_DN       &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LC(LS(NUMBER_4)))  &kp C_VOLUME_DOWN    &kp C_PREV  &kp F16           &kp F17            &kp F18                &kp LG(M)          &bootloader
                                                         &none                 &none                     &trans               &trans      &none             &none
            >;

            label = "Conf";
        };

        Mini-nav {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &trans  &trans          &trans          &trans        &trans     &trans
&trans  &trans        &trans        &trans        &trans        &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans        &trans        &trans        &trans        &trans    &trans  &trans          &trans          &trans        &trans     &trans
                                    &trans        &trans        &trans    &trans  &trans          &trans
            >;

            label = "Mini";
        };

        Fun {
            bindings = <
&trans  &trans                         &trans                     &trans                     &trans                             &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &sk_mod LEFT_SHIFT LEFT_SHIFT  &sk_mod LEFT_GUI LEFT_GUI  &sk_mod LEFT_ALT LEFT_ALT  &sk_mod LEFT_CONTROL LEFT_CONTROL  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans                         &trans                     &trans                     &trans                             &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                                                  &trans                     &trans                             &trans    &trans  &trans  &trans
            >;

            label = "Fun";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
