#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        brace: brace {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        bracket: bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        shift_tab: shift_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_TAB";
            bindings = <&kp SPACE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_del: shift_del {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DEL";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        adv_lt: adv_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "ADV_LT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <100>;
            require-prior-idle-ms = <75>;
        };

        mod_com: mod_com {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_COM";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_per: mod_per {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_PER";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_hold_tap: mod_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;

            quick-tap-ms = <75>;
            require-prior-idle-ms = <60>;
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&mod_hold_tap LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        adv_repeat: adv_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "ADV_REPEAT";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <60>;
            require-prior-idle-ms = <60>;
            flavor = "tap-preferred";
        };

        shift_para: shift_para {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_PARA";
            bindings = <&para>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_bracket: shift_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_BRACKET";
            bindings = <&bracket>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_brace: shift_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_BRACE";
            bindings = <&brace>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        swe_chars: swe_chars {
            compatible = "zmk,behavior-tap-dance";
            label = "SWE_CHARS";
            #binding-cells = <0>;
            tapping-term-ms = <50>;
            bindings = <&kp RA(A)>, <&kp RA(U)>;
        };

        adv_backforth: adv_backforth {
            compatible = "zmk,behavior-mod-morph";
            label = "ADV_BACKFORTH";
            bindings = <&kp LG(LEFT_BRACKET)>, <&kp LG(RIGHT_BRACKET)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sk_mod: sk_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MOD";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <50>;
            flavor = "tap-preferred";
        };

        s_shift_td: s_shift_td {
            compatible = "zmk,behavior-tap-dance";
            label = "S_SHIFT_TD";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <60>;
        };

        s_shift: s_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "S_SHIFT";
            bindings = <&kp>, <&s_shift_td>;

            #binding-cells = <2>;
            tapping-term-ms = <60>;
            flavor = "tap-preferred";
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        per_auto: per_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "PER_AUTO";
        };

        com_auto: com_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "COM_AUTO";
        };

        exl_auto: exl_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp SPACE &sk LEFT_SHIFT>;
            label = "EXL_AUTO";
        };

        ques_auto: ques_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp SPACE &sk LEFT_SHIFT>;
            label = "QUES_AUTO";
        };

        sci_ho: sci_ho {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp O>;
            label = "SCI_HO";
        };
    };

    combos {
        compatible = "zmk,combos";

        sym_8 {
            bindings = <&kp RA(U)>;
            key-positions = <8 20>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB                     &kp B  &kp L  &kp M             &kp P       &kp X              &mt LS(LEFT_GUI) LG(S)  &kp F       &kp O                       &kp U     &kp J      &swe_chars
&s_shift LEFT_SHIFT 0       &kp D  &kp R  &kp T             &kp S       &kp Q              &kp Y                   &kp N       &kp A                       &kp E     &kp I      &mt RIGHT_SHIFT SLASH
&sk_mod LCTRL LEFT_CONTROL  &kp G  &kp W  &kp K             &kp C       &kp V              &kp Z                   &kp H       &mod_com                    &mod_per  &kp MINUS  &sk_mod RIGHT_ALT RIGHT_ALT
                                          &adv_lt 3 ESCAPE  &shift_del  &adv_repeat 1 0    &adv_lt 2 ENTER         &shift_tab  &mt RIGHT_GUI SINGLE_QUOTE
            >;
        };

        NUM {
            display-name = "Num";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp LC(LA(LEFT_GUI))               &kp LEFT_ARROW  &kp AMPERSAND    &kp GREATER_THAN  &kp PERCENT   &kp PERIOD    &kp UP_ARROW     &kp N7        &kp N8         &kp N9        &kp RIGHT_ARROW  &trans
&mo 5                              &kp LC(A)       &kp EXCLAMATION  &kp EQUAL         &kp PLUS      &kp MINUS     &kp BACKSPACE    &kp NUMBER_4  &kp NUMBER_5   &kp NUMBER_6  &kp NUMBER_0     &mo 4
&sk_mod LEFT_CONTROL LEFT_CONTROL  &kp LC(X)       &kp PIPE         &kp LESS_THAN     &kp ASTERISK  &kp SLASH     &kp DOWN_ARROW   &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &trans           &sk_mod RIGHT_ALT RIGHT_ALT
                                                                    &mo 3             &shift_del    &trans        &adv_lt 4 ENTER  &shift_tab    &kp RIGHT_GUI
            >;
        };

        SYM {
            display-name = "Sym";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans                             &kp EXCL       &kp AT            &kp HASH      &kp DLLR         &kp PRCNT           &kp CARET  &kp AMPS    &kp ASTRK      &kp LEFT_PARENTHESIS  &kp RPAR        &kp QUESTION
&s_shift LEFT_SHIFT 0              &trans         &trans            &kp QUESTION  &kp EXCLAMATION  &kp GRAVE           &kp MINUS  &kp EQUAL   &shift_para    &shift_brace          &shift_bracket  &kp BACKSLASH
&sk_mod LEFT_CONTROL LEFT_CONTROL  &kp LESS_THAN  &kp GREATER_THAN  &ques_auto    &exl_auto        &kp TILDE           &kp UNDER  &kp PLUS    &com_auto      &per_auto             &kp PIPE        &sk_mod RIGHT_ALT RIGHT_ALT
                                                                    &kp LGUI      &shift_del       &adv_lt 4 ESCAPE    &trans     &shift_tab  &kp RIGHT_GUI
            >;
        };

        NAV {
            display-name = "Nav";
            bindings = <
&browsertab            &kp LG(Q)  &kp LG(W)                          &kp LG(LS(E))              &none                      &kp C_VOLUME_UP      &kp C_PREV        &kp HOME              &kp UP_ARROW        &kp END                &kp PG_UP      &kp LG(L)
&s_shift LEFT_SHIFT 0  &kp LG(A)  &sk_mod LEFT_CONTROL LEFT_CONTROL  &sk_mod LEFT_ALT LEFT_ALT  &sk_mod LEFT_GUI LEFT_GUI  &kp K_MUTE           &kp C_PLAY_PAUSE  &kp LEFT              &kp DOWN_ARROW      &kp RIGHT              &kp LS(LG(R))  &kp RIGHT_SHIFT
&kp GLOBE              &kp LG(Z)  &kp LG(X)                          &kp LG(C)                  &kp LG(V)                  &kp C_VOLUME_DOWN    &kp C_NEXT        &kp LG(LEFT_BRACKET)  &kp LC(DOWN_ARROW)  &kp LG(RIGHT_BRACKET)  &kp PAGE_DOWN  &kp RIGHT_ALT
                                                                     &trans                     &adv_backforth             &kp ESCAPE           &kp ENTER         &kp TAB               &kp LG(SPACE)
            >;
        };

        Configure {
            bindings = <
&kp ESCAPE      &kp C_BRI_UP           &kp F16               &kp F17               &kp F18                   &kp C_VOLUME_UP      &kp C_NEXT    &none              &kp LC(UP_ARROW)   &none              &none  &none
&none           &kp C_BRI_DN           &kp LG(LS(LEFT))      &kp LG(LS(SPACE))     &kp LS(LG(RIGHT))         &kp K_MUTE           &kp LG(C_PP)  &kp LC(LS(LEFT))   &kp LG(ENTER)      &kp LS(LC(RIGHT))  &none  &none
&studio_unlock  &kp LC(LA(LG(SPACE)))  &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &kp LG(LC(LS(NUMBER_4)))  &kp C_VOLUME_DOWN    &kp C_PREV    &kp LG(LC(LS(T)))  &kp LG(LC(LS(S)))  &kp LG(LA(LC(R)))  &none  &bootloader
                                                             &none                 &none                     &trans               &trans        &none              &none
            >;

            label = "CONF";
        };

        Mini-nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &para           &kp UP_ARROW    &bracket         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans           &trans  &trans
                        &trans  &trans  &trans    &trans  &trans          &trans
            >;

            label = "MINI";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
